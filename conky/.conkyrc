-- vim: ts=2 sw=2 et ai cindent syntax=lua

currentdir = os.getenv("HOME") .. '/dotfiles/conky/'
dofile(currentdir .. 'localConfig.lua')
dofile(currentdir .. 'helpers.lua')

conky.config = {
  out_to_x = false,
  own_window = false,
  out_to_console = true,
  background = false,
  max_text_width = 0,
  double_buffer = true,
  -- Update interval in seconds
  update_interval = 0.3,

  -- This is the number of times Conky will update before quitting.
  -- Set to zero to run forever.
  total_run_times = 0,

  -- Shortens units to a single character (kiB->k, GiB->G, etc.). Default is off.
  short_units = true,

  -- How strict should if_up be when testing an interface for being up?
  -- The value is one of up, link or address, to check for the interface
  -- being solely up, being up and having link or being up, having link
  -- and an assigned IP address. 
  if_up_strictness = 'address',

  -- Add spaces to keep things from moving about?  This only affects certain objects.
  -- use_spacer should have an argument of left, right, or none
  use_spacer = 'left',

  -- Force UTF8? note that UTF8 support required XFT
  override_utf8_locale = false,

  -- number of cpu samples to average
  -- set to 1 to disable averaging
  cpu_avg_samples = 4,


  font = 'pango: FontAwesome 8',

  template1 = [[
    ${if_match ${\1 \2}<10}
      " "
    ${else} ${if_match ${\1 \2}<20} 
      "▁"
    ${else} ${if_match ${\1 \2}<30}
      "▂" 
    ${else} ${if_match ${\1 \2}<40}
      "▃"
    ${else} ${if_match ${\1 \2}<50} 
      "▄"
    ${else} ${if_match ${\1 \2}<60}
      "▅" 
    ${else} ${if_match ${\1 \2}<70}
      "▆"
    ${else} ${if_match ${\1 \2}<80}
      "▇"
    ${else}
      "█" 
    ${endif} ${endif} ${endif} ${endif} ${endif} ${endif} ${endif} ${endif} 
  ]],

  template2 = getTemplateForColors(colors),
};


-- ###############################################################################################
-- ###############################################################################################
  -- ###############################################################################################
function warningWarning(text)
  return [[{
    "full_text":"]] .. text .. [[",
      "color": "]] .. errorColorBg .. [[",  
      "background": "]] .. errorColorFg .. [[",  
      "align": "center",
      "min_width":"]] .. stringWidth(32) .. [["
  }]]
end

function wifi()
  return [[{
    "full_text" : "${downspeed ]] .. internetInterface .. [[ }/s",
      "color" : "]] .. textColorFg .. [[",
      "min_width":"]] .. stringWidth(8) .. [[",
      "align": "center"
  }]]
end

function cpuCore(coreN)
  return [[{
    "separator_block_width":3,
      "min_width":"]] .. stringWidth(1) .. [[",
      "full_text" : ${template1 cpu cpu]] .. coreN .. [[},
      "color" : "\#\#${template2 cpu cpu"]] .. coreN .. [["}", 
      "separator" : false
  }]]
end
-- ###############################################################################################
-- ###############################################################################################
-- ###############################################################################################

-- Stuff after 'TEXT' will be formatted on screen
conky.text = [[
# JSON for i3bar

  [
# Next block - Num lock indicator
  ${if_match "${exec xset q | grep 'Num Lock' | sed 's/.*Num Lock:[ ]*\([^ ]*\).*/\1/'}"=="off"}
  ]] .. warningWarning("NumLock off") .. [[,
  ${endif}
# Next block - Caps lock indicator
  ${if_match "${exec xset q | grep 'Caps Lock' | sed 's/.*Caps Lock:[ ]*\([^ ]*\).*/\1/'}"=="on"}
  ]] .. warningWarning("CapsLock") .. [[,
  ${endif}
# Next block - wi-fi 
  ]] .. wifi() .. [[,
# VPN 
{ 
  "full_text": "${execi 5 (bash ~/dotfiles/.i3/getVPN.sh)}",
  "background": "]] .. errorColorFg .. [[",
  "separator": false
},
# current local ip. TODO: it is different on different machines
{ 
  "full_text": "${addr ]] .. internetInterface .. [[}",
  "color": "]] .. textColorFg .. [[" 
},
# Next 5 blocks - cpu usage
{
  "name" : "Processor",
  "full_text" : "",
  "separator_block_width":3,
  "separator" : false
},

{ 
  "separator_block_width":3,
  "min_width":"▁",
  "full_text" : "${exec cat ]] .. hwMonitorPath .. [[ | cut -c-2}",
  "color" : "\#${template2 exec ~/dotfiles/.i3/getCPUTempNormalized.sh}", 
  "separator" : false
},
{
    "separator_block_width":3,
      "min_width":"]] .. stringWidth(1) .. [[",
      "full_text" : ${template1 cpu cpu1},
      "color" : "\#${template2 cpu cpu1}", 
      "separator" : false
  },
{
    "separator_block_width":3,
      "min_width":"]] .. stringWidth(1) .. [[",
      "full_text" : ${template1 cpu cpu2},
      "color" : "\#${template2 cpu cpu2}", 
      "separator" : false
  },
{
    "separator_block_width":3,
      "min_width":"]] .. stringWidth(1) .. [[",
      "full_text" : ${template1 cpu cpu3},
      "color" : "\#${template2 cpu cpu3}", 
      "separator" : false
  },
{
    "separator_block_width":3,
      "min_width":"]] .. stringWidth(1) .. [[",
      "full_text" : ${template1 cpu cpu4},
      "color" : "\#${template2 cpu cpu4}", 
      "separator" : false
  },
{
    "separator_block_width":3,
      "min_width":"]] .. stringWidth(1) .. [[",
      "full_text" : ${template1 cpu cpu5},
      "color" : "\#${template2 cpu cpu5}", 
      "separator" : false
  },
{
    "separator_block_width":3,
      "min_width":"]] .. stringWidth(1) .. [[",
      "full_text" : ${template1 cpu cpu6},
      "color" : "\#${template2 cpu cpu6}", 
      "separator" : false
  },
# Next block - memory usage
{ 
  "full_text" : "",
  "min_width":"",
  "separator_block_width":3,
  "separator" : false
},
{ "name" : "Memory",
  "min_width":"▁",
  "full_text" : ${template1 memperc},
  "color" : "\#${template2 memperc}", 
  "separator_block_width":10
},
# Next block - main disk free space
{
  "name" : "HDD",
  "full_text" : " ${fs_free /home} Free",
  "color" : "]] .. textColorFg .. [["
},
# Next block - system volume 
  ${if_match ${exec ~/.i3/getVolume.sh}>0}
    {
      "name" : "Volume",
      "full_text" : " ${exec ~/.i3/getVolume.sh}",
      "color" : "]] .. textColorFg .. [["
    },
  ${else}
    {
      "name" : "Volume",
      "full_text" : " Mute",
      "color": "]] .. errorColorBg .. [["  
    },
  ${endif}
# Next 2 blocks - date and time
{
  "name" : "Date",
  "full_text" : "${time %a %d %b}",
  "color" : "]] .. secondaryTextColorFg .. [[",
  "separator" : false 
},
{ 
  "name" : "Time",
  "full_text" : "${time  %H:%M}", 
  "color" : "]] .. textColorFg .. [["
},
# Next block - keyboard layout
{ 
  "name" : "Language", 
  ${if_match ${exec xset -q|grep LED| awk '{ print $10 }'}<10}
    "full_text": " EN ",
    "color" : "]] .. textColorFg .. [["
  ${else}
    "full_text": " RU ",
    "background": "]] .. errorColorFg .. [[",
    "color": "\#000000"
  ${endif} 
} 
  ],
  ]];

