-- vim: ts=2 sw=2 et ai cindent syntax=lua

dofile(os.getenv("HOME") .. '/dotfiles/conky/' .. 'automaticLocalVars.lua')
dofile(path .. 'localConfig.lua')
dofile(path .. 'helpers.lua')

conky.config = {
  max_user_text = 131072,

  out_to_x = false,
  own_window = false,
  out_to_console = true,
  background = false,
  max_text_width = 0,
  double_buffer = true,
  -- Update interval in seconds
  update_interval = 0.3,

  -- This is the number of times Conky will update before quitting.
  -- Set to zero to run forever.
  total_run_times = 0,

  -- Shortens units to a single character (kiB->k, GiB->G, etc.). Default is off.
  short_units = true,

  -- How strict should if_up be when testing an interface for being up?
  -- The value is one of up, link or address, to check for the interface
  -- being solely up, being up and having link or being up, having link
  -- and an assigned IP address. 
  if_up_strictness = 'address',

  -- Add spaces to keep things from moving about?  This only affects certain objects.
  -- use_spacer should have an argument of left, right, or none
  use_spacer = 'left',

  -- Force UTF8? note that UTF8 support required XFT
  override_utf8_locale = false,

  -- number of cpu samples to average
  -- set to 1 to disable averaging
  cpu_avg_samples = 4,

  font = 'pango: FontAwesome 8',

  lua_load = path .. 'helpers.lua',
};


-- ###############################################################################################
-- ###############################################################################################
  -- ###############################################################################################
function numLock()
  return [[{
    "name": "NumLock",
    "full_text":"${lua numLock_str}",
    "color": "]] .. errorColorBg .. [[",  
    "background": "]] .. errorColorFg .. [[",  
    "align": "center",
    "min_width":"]] .. stringWidth(32) .. [["
  },]]
end

function capsLock()
  return [[{
    "name": "CapsLock",
    "full_text":"${lua capsLock_str}",
    "color": "]] .. errorColorBg .. [[",  
    "background": "]] .. errorColorFg .. [[",  
    "align": "center",
    "min_width":"]] .. stringWidth(32) .. [["
  },]]
end

function wifi()
  return [[
    {
      "name": "Network",
      "full_text": " ${downspeed ]] .. internetInterface .. [[ }/s",
      "color": "]] .. textColorFg .. [[",
      "min_width": "]] .. stringWidth(8) .. [[",
      "align": "center"
    },
  ]]
end

function keyboardLayout()
  return [[
    { 
      "name": "Language", 
    ${if_match ${exec xset -q|grep LED| awk '{ print $10 }'}<10}
      "full_text": " EN ",
      "color": "]] .. textColorFg .. [["
    ${else}
      "full_text": " RU ",
      "color": "]] .. black .. [[",
      "background": "]] .. errorColorFg .. [["
    ${endif} 
    },
  ]]
end

function time()
  return [[
    { 
      "name": "Time",
      "full_text": " ${time  %H:%M} ", 
      "color": "]] .. black .. [[",
      "background": "]] .. textColorFg .. [[",
      "separator": false 
    },
  ]]
end
function date()
  return [[
    {
      "name" : "Date",
      "full_text" : "${time %a %d %b}",
      "color" : "]] .. secondaryTextColorFg .. [["
    },
  ]]
end

function volume()
  return [[
    {
      "name": "Volume",
      "full_text": "   ${exec ~/.i3/getVolume.sh}",
      "color": "]] .. textColorFg .. [["
    },
  ]]
end

function memory()
  return [[
    { 
      "name": "Memory_icon",
      "full_text": " ",
      "min_width": "",
      "separator_block_width": 3,
      "separator": false
    },
    { 
      "name": "Memory",
      "min_width": "▁",
      "full_text": "${lua memory_str}",
      "color": "${lua memory_color}", 
      "separator_block_width": 10
    },
  ]]
end

function vpn()
  return [[
    { 
      "name": "Network",
      "full_text": "${execi 5 (bash ~/dotfiles/.i3/getVPN.sh)}",
      "color": "]] .. black .. [[",
      "background": "]] .. textColorFg .. [[",
      "separator": false
    },
  ]]
end

function ip()
  return [[
    { 
      "name": "Network",
      "full_text": "${addr ]] .. internetInterface .. [[}",
      "color": "]] .. textColorFg .. [[" 
    },
  ]]
end

function hdd()
  return [[
    {
      "name": "HDD",
      "full_text": " ${fs_free /home} Free",
      "color": "]] .. textColorFg .. [["
    },
  ]]
end

function cpuHeader()
  return [[
    {
      "name": "CPU_header",
      "full_text": " ",
      "separator_block_width": 3,
      "separator": false
    },
  ]]
end

function cpuTemperature()
  return [[
    { 
      "name": "CPU_temperature",
      "separator_block_width": 3,
      "min_width": "▁",
      "full_text": "${lua cpuTemperature}",
      "color": "${lua cpuTemperature_color}",
      "separator": false
    },
  ]]
end

function cpuTopN(n)
  return [[
    { 
      "name": "CPU_top_]] .. n .. [[",
      "separator_block_width": 3,
      "min_width": "▁",
      "full_text": "${lua top_cpu_char ]] .. n .. [[}",
      "color": "${lua top_cpu_color ]] .. n .. [[}",
      "separator": false
    },
  ]]
end

-- Stuff after 'TEXT' will be formatted on screen
conky.text = [[
# JSON for i3bar
  [
  ]] .. numLock() .. [[
  ]] .. capsLock() .. [[
  ]] .. keyboardLayout() .. [[
  ]] .. time() .. [[
  ]] .. date() .. [[
  ]] .. volume() .. [[
  ]] .. cpuHeader() .. [[
  ]] .. cpuTemperature() .. [[
  ]] .. cpuTopN(1) .. [[
  ]] .. cpuTopN(2) .. [[
  ]] .. cpuTopN(4) .. [[
  ]] .. cpuTopN(8) .. [[
  ]] .. cpuTopN(16) .. [[
  ]] .. cpuTopN(coresNum) .. [[
  ]] .. memory() .. [[
  ]] .. vpn() .. [[
  ]] .. wifi() .. [[
  ]] .. ip() .. [[
  ]] .. hdd() .. [[
  # чтобы у всех в конце была запятая - последний пустой блок без запятой
  { "full_text": "" }
  ],
]];
