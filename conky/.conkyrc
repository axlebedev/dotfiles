-- vim: ts=2 sw=2 et ai cindent syntax=lua

currentdir = os.getenv("HOME") .. '/dotfiles/conky/'
dofile(currentdir .. 'localConfig.lua')
dofile(currentdir .. 'helpers.lua')

conky.config = {
  out_to_x = false,
  own_window = false,
  out_to_console = true,
  background = false,
  max_text_width = 0,
  double_buffer = true,
  -- Update interval in seconds
  update_interval = 0.3,

  -- This is the number of times Conky will update before quitting.
  -- Set to zero to run forever.
  total_run_times = 0,

  -- Shortens units to a single character (kiB->k, GiB->G, etc.). Default is off.
  short_units = true,

  -- How strict should if_up be when testing an interface for being up?
  -- The value is one of up, link or address, to check for the interface
  -- being solely up, being up and having link or being up, having link
  -- and an assigned IP address. 
  if_up_strictness = 'address',

  -- Add spaces to keep things from moving about?  This only affects certain objects.
  -- use_spacer should have an argument of left, right, or none
  use_spacer = 'left',

  -- Force UTF8? note that UTF8 support required XFT
  override_utf8_locale = false,

  -- number of cpu samples to average
  -- set to 1 to disable averaging
  cpu_avg_samples = 4,


  font = 'pango: FontAwesome 8',

  template1 = [[
    ${if_match ${\1 \2}<10}
      " "
    ${else} ${if_match ${\1 \2}<20} 
      "▁"
    ${else} ${if_match ${\1 \2}<30}
      "▂" 
    ${else} ${if_match ${\1 \2}<40}
      "▃"
    ${else} ${if_match ${\1 \2}<50} 
      "▄"
    ${else} ${if_match ${\1 \2}<60}
      "▅" 
    ${else} ${if_match ${\1 \2}<70}
      "▆"
    ${else} ${if_match ${\1 \2}<80}
      "▇"
    ${else}
      "█" 
    ${endif} ${endif} ${endif} ${endif} ${endif} ${endif} ${endif} ${endif} 
  ]],

  -- for anything
  template2 = getTemplateForColors(colors),
};


-- ###############################################################################################
-- ###############################################################################################
  -- ###############################################################################################
function warningWarning(text)
  return [[{
    "full_text":"]] .. text .. [[",
      "color": "]] .. errorColorBg .. [[",  
      "background": "]] .. errorColorFg .. [[",  
      "align": "center",
      "min_width":"]] .. stringWidth(32) .. [["
  }]]
end

function wifi()
  return [[
    {
      "name" : "Network",
      "full_text" : " ${downspeed ]] .. internetInterface .. [[ }/s",
      "color" : "]] .. textColorFg .. [[",
      "min_width":"]] .. stringWidth(8) .. [[",
      "align": "center"
    },
  ]]
end

function numLock()
  if needNumLockOff then
    return [[
      ${if_match "${exec xset q | grep 'Num Lock' | sed 's/.*Num Lock:[ ]*\([^ ]*\).*/\1/'}"=="off"}
    ]] .. warningWarning("NumLock off") .. [[,
    ${endif} ]]
  elseif needNumLockOn then
    return [[
      ${if_match "${exec xset q | grep 'Num Lock' | sed 's/.*Num Lock:[ ]*\([^ ]*\).*/\1/'}"=="on"}
    ]] .. warningWarning("NumLock on") .. [[,
    ${endif} ]]
  end
  return ''
end

function capsLock()
  return [[
    ${if_match "${exec xset q | grep 'Caps Lock' | sed 's/.*Caps Lock:[ ]*\([^ ]*\).*/\1/'}"=="on"}
    ]] .. warningWarning("CapsLock") .. [[,
    ${endif}
  ]]
end

function keyboardLayout()
  return [[
    { 
      "name" : "Language", 
        ${if_match ${exec xset -q|grep LED| awk '{ print $10 }'}<10}
      "full_text": " EN ",
        "color" : "]] .. textColorFg .. [["
          ${else}
      "full_text": " RU ",
        "color": "]] .. black .. [[",
        "background": "]] .. errorColorFg .. [["
          ${endif} 
    },
  ]]
end

function time()
  return [[
    { 
      "name" : "Time",
      "full_text" : " ${time  %H:%M} ", 
      "color" : "]] .. black .. [[",
      "background" : "]] .. textColorFg .. [[",
      "separator" : false 
    },
  ]]
end
function date()
  return [[
    {
      "name" : "Date",
      "full_text" : "${time %a %d %b}",
      "color" : "]] .. secondaryTextColorFg .. [["
    },
  ]]
end

function volume()
  return [[
    {
      "name" : "Volume",
      "full_text" : "   ${exec ~/.i3/getVolume.sh}",
      "color" : "]] .. textColorFg .. [["
    },
  ]]
end

function memory()
  return [[
    { 
      "full_text" : " ",
      "min_width":"",
      "separator_block_width":3,
      "color" : "]] .. textColorFg .. [[",
      "separator" : false
    },
    { "name" : "Memory",
      "min_width":"▁",
      "full_text" : ${template1 memperc},
      "color" : "\#${template2 memperc}", 
      "separator_block_width":10
    },
  ]]
end

function vpn()
  return [[
    { 
      "name": "Network",
      "full_text": "${execi 5 (bash ~/dotfiles/.i3/getVPN.sh)}",
      "color": "]] .. black .. [[",
      "background": "]] .. textColorFg .. [[",
      "separator": false
    },
  ]]
end

function ip()
  return [[
    { 
      "name" : "Network",
      "full_text": "${addr ]] .. internetInterface .. [[}",
      "color": "]] .. textColorFg .. [[" 
    },
  ]]
end

function hdd()
  return [[
    {
      "name" : "HDD",
      "full_text" : " ${fs_free /home} Free",
      "color" : "]] .. textColorFg .. [["
    },
  ]]
end

function cpuHeader()
  return [[
    {
      "name" : "Processor",
      "full_text" : " ",
      "separator_block_width":3,
      "color" : "]] .. textColorFg .. [[",
      "separator" : false
    },
    { 
      "separator_block_width":3,
      "min_width":"▁",
      "full_text" : "${exec cat ]] .. hwMonitorPath .. [[ | cut -c-2}",
      "color" : "\#${template2 exec ~/dotfiles/.i3/getCPUTempNormalized.sh}", 
      "separator" : false
    },
  ]]
end

function cpuCore(coreN)
  return [[{
    "name": "CPU",
    "separator_block_width":3,
    "min_width":"]] .. stringWidth(1) .. [[",
    "full_text" : ${template1 cpu cpu]] .. coreN .. [[},
    "color" : "\#]] .. getCoreTempColor(coreN) .. [[", 
    "separator" : false
  },]]
end
local cpu = ''

local handle = io.popen('cat /proc/cpuinfo | grep processor | wc -l')
local output = handle:read('*a')
handle:close()
local coresNum = tonumber(output)

for n=1,coresNum,1 do
  cpu = cpu .. cpuCore(n)  
end

-- Stuff after 'TEXT' will be formatted on screen
conky.text = [[
# JSON for i3bar

  [
  ]] .. numLock() .. [[
  ]] .. capsLock() .. [[
  ]] .. keyboardLayout() .. [[
  ]] .. time() .. [[
  ]] .. date() .. [[
  ]] .. volume() .. [[
  ]] .. cpuHeader() .. [[
  ]] .. cpu .. [[
  ]] .. memory() .. [[
  ]] .. vpn() .. [[
  ]] .. wifi() .. [[
  ]] .. ip() .. [[
  ]] .. hdd() .. [[
  # чтобы у всех в конце была запятая - последний пустой блок без запятой
  { "full_text": "" }
  ],
  ]];

